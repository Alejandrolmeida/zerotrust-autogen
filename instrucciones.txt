/*
🏗️  ────────────────────────────────────────────────
   SUPER-PROMPT PARA GITHUB COPILOT
   Proyecto:  Landing Zone Express (demo Global Azure 2025)
   Autor:     Alejandro Almeida (MVP Azure & AI)
   Objetivo:  Crear una solución “multi-agente” con Magentic-One
              que despliegue y supervise una Azure Enterprise
              Landing Zone aplicando principios Zero Trust
              SIN licencias Entra ID P1/P2 (solo Basic).

🛠️  1. STACK & DEPENDENCIAS
   – python >= 3.11  (asyncio nativo)
   – autogen-agentchat >= 0.4
     autogen-ext[magentic-one,openai]
   – azure-identity, azure-mgmt-resource   # SDK gestión
   – azure-cli v2 (invocado vía subprocess)
   – bicep >= 0.25 (plantillas infra)
   – playwright + chromium  # requerido por WebSurfer
   – pytest-asyncio para tests

📁  2. ESTRUCTURA DE CARPETAS PROPUESTA
   landing-zone-express/
   ├── main.py               # entry-point CLI (“lze …”)
   ├── agents/
   │   ├── orchestrator.py   # MagenticOneGroupChat wrapper
   │   ├── deploy_agent.py   # interactúa con Azure CLI/Bicep
   │   ├── policy_agent.py   # aplica Azure Policy & RBAC
   │   └── monitor_agent.py  # analiza logs y alertas
   ├── infra/
   │   ├── core.bicep        # landing-zone mínima (hub/spoke, NSG, GW…)
   │   └── policies/
   │       ├── zero-trust.json
   │       └── tagging.json
   ├── requirements.txt
   ├── README.md
   └── tests/
       └── test_e2e.py

🧠  3. LÓGICA / COMPORTAMIENTO
   a) main.py expone una CLI básica:
      $ python main.py deploy --subscription <id> --env prod
      $ python main.py audit  --rg <nombre-rg>
   b) orchestrator.py usa MagenticOneGroupChat como “team driver”.
      – Orchestrator descompone la tarea (deploy, audit, remediate…)
      – Delegará subtareas en:
        • DeployAgent  → invoca Azure CLI/Bicep
        • PolicyAgent  → asigna definiciones & iniciativas
        • MonitorAgent → consulta Azure Monitor y Advisor
   c) Cada agente hereda de la clase AssistantAgent o MagenticOneCoderAgent,
      define un “system_prompt” claro con su rol y autoriza solo
      los comandos Shell/Azure que necesita (principio de mínimo privilegio).
   d) Zero Trust core (sin Entra ID Premium):
      – RBAC: Owner/Contributor solo para identidad de orquestación.
      – Políticas obligatorias: “Deny Public IP”, “Require TLS 1.2”, “ASC Default”.
      – Network: NSG + UDR bloqueando tráfico lateral; Activar Just-in-Time en VMs.
      – Identidad: managed-identity + access tokens, no secretos planos.
   e) Al finalizar un despliegue, MonitorAgent debe:
      – Ejecutar “az security assessment list --query …” y
        generar un informe Markdown guardado en ./reports/YYYY-MM-DD-HH-MM.md.
      – Si encuentra “highSeverity”: abrir GitHub Issue vía REST (placeholder).

🔄  4. FLUJO ASÍNCRONO SUGERIDO
   1. main.py parsea args, crea OpenAIChatCompletionClient (model="gpt-4o").
   2. Instancia el team MagenticOneGroupChat([Deploy, Policy, Monitor]).
   3. Orchestrator.run_stream(task=“Deploy landing zone <env>”) until done.
   4. Devuelve exit code 0/1 según éxito.

✅  5. PRUEBAS RÁPIDAS (pytest-asyncio)
   – test_landing_zone_deploy(): asegura que el RG y políticas existen.
   – test_zero_trust_controls(): verifica reglas NSG y tag “owner”.
   – mock_openai=True para ejecutar pruebas sin llamadas reales.

💡  6. ESTILO & CALIDAD
   – typing + PEP-695 “|” unions
   – logging INFO por agente; DEBUG opcional (flag --verbose)
   – guía flake8 + ruff + pre-commit
   – README debe incluir diagrama ASCII de la arquitectura.

Copilot, sigue estas directrices para generar los ficheros. Empieza creando requirements.txt y main.py con la CLI básica y los agentes esqueleto, luego completa la lógica interna. Mantén el código modular y documentado. Incluye TODO: markers donde sea necesario más detalle.
─────────────────────────────────────────────── */
